// tslint:disable
/**
 * Trading.ServiceManagerUtils.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from "rxjs";
import type { AjaxResponse } from "rxjs/ajax";
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from "../runtime";
import type { OperationOpts, HttpHeaders, HttpQuery } from "../runtime";
import type { ChangeRequest } from "../models";

export interface ChangesGetRequest {
  id: string;
}

export interface ChangesPostRequest {
  value: ChangeRequest;
}

export interface ChangesPutActivityFailedRequest {
  id: string;
  activityName: string;
}

export interface ChangesPutActivitySucceededRequest {
  id: string;
  activityName: string;
}

export interface ChangesPutApproveChangeRequest {
  id: string;
}

export interface ChangesPutClearApproveStatusRequest {
  id: string;
}

export interface ChangesPutRejectChangeRequest {
  id: string;
}

/**
 * no description
 */
export class ChangesApi extends BaseAPI {
  /**
   */
  changesGet({ id }: ChangesGetRequest): Observable<ChangeRequest>;
  changesGet(
    { id }: ChangesGetRequest,
    opts?: OperationOpts,
  ): Observable<AjaxResponse<ChangeRequest>>;
  changesGet(
    { id }: ChangesGetRequest,
    opts?: OperationOpts,
  ): Observable<ChangeRequest | AjaxResponse<ChangeRequest>> {
    throwIfNullOrUndefined(id, "id", "changesGet");

    return this.request<ChangeRequest>(
      {
        url: "/api/changes/{id}".replace("{id}", encodeURI(id)),
        method: "GET",
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesGetMe(): Observable<string>;
  changesGetMe(opts?: OperationOpts): Observable<AjaxResponse<string>>;
  changesGetMe(
    opts?: OperationOpts,
  ): Observable<string | AjaxResponse<string>> {
    return this.request<string>(
      {
        url: "/api/changes/me",
        method: "GET",
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesGetMyApprovals(): Observable<Array<ChangeRequest>>;
  changesGetMyApprovals(
    opts?: OperationOpts,
  ): Observable<AjaxResponse<Array<ChangeRequest>>>;
  changesGetMyApprovals(
    opts?: OperationOpts,
  ): Observable<Array<ChangeRequest> | AjaxResponse<Array<ChangeRequest>>> {
    return this.request<Array<ChangeRequest>>(
      {
        url: "/api/changes/myapprovals",
        method: "GET",
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesImpactQuestions(): Observable<{ [key: string]: string }>;
  changesImpactQuestions(
    opts?: OperationOpts,
  ): Observable<AjaxResponse<{ [key: string]: string }>>;
  changesImpactQuestions(
    opts?: OperationOpts,
  ): Observable<
    { [key: string]: string } | AjaxResponse<{ [key: string]: string }>
  > {
    return this.request<{ [key: string]: string }>(
      {
        url: "/api/changes/impactquestions",
        method: "GET",
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesPost({ value }: ChangesPostRequest): Observable<object>;
  changesPost(
    { value }: ChangesPostRequest,
    opts?: OperationOpts,
  ): Observable<AjaxResponse<object>>;
  changesPost(
    { value }: ChangesPostRequest,
    opts?: OperationOpts,
  ): Observable<object | AjaxResponse<object>> {
    throwIfNullOrUndefined(value, "value", "changesPost");

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
    };

    return this.request<object>(
      {
        url: "/api/changes/new",
        method: "POST",
        headers,
        body: value,
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesPutActivityFailed({
    id,
    activityName,
  }: ChangesPutActivityFailedRequest): Observable<object>;
  changesPutActivityFailed(
    { id, activityName }: ChangesPutActivityFailedRequest,
    opts?: OperationOpts,
  ): Observable<AjaxResponse<object>>;
  changesPutActivityFailed(
    { id, activityName }: ChangesPutActivityFailedRequest,
    opts?: OperationOpts,
  ): Observable<object | AjaxResponse<object>> {
    throwIfNullOrUndefined(id, "id", "changesPutActivityFailed");
    throwIfNullOrUndefined(
      activityName,
      "activityName",
      "changesPutActivityFailed",
    );

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      id: id,
      activityName: activityName,
    };

    return this.request<object>(
      {
        url: "/api/changes/activityfailed",
        method: "PUT",
        query,
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesPutActivitySucceeded({
    id,
    activityName,
  }: ChangesPutActivitySucceededRequest): Observable<object>;
  changesPutActivitySucceeded(
    { id, activityName }: ChangesPutActivitySucceededRequest,
    opts?: OperationOpts,
  ): Observable<AjaxResponse<object>>;
  changesPutActivitySucceeded(
    { id, activityName }: ChangesPutActivitySucceededRequest,
    opts?: OperationOpts,
  ): Observable<object | AjaxResponse<object>> {
    throwIfNullOrUndefined(id, "id", "changesPutActivitySucceeded");
    throwIfNullOrUndefined(
      activityName,
      "activityName",
      "changesPutActivitySucceeded",
    );

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      id: id,
      activityName: activityName,
    };

    return this.request<object>(
      {
        url: "/api/changes/activitysucceeded",
        method: "PUT",
        query,
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesPutApproveChange({
    id,
  }: ChangesPutApproveChangeRequest): Observable<boolean>;
  changesPutApproveChange(
    { id }: ChangesPutApproveChangeRequest,
    opts?: OperationOpts,
  ): Observable<AjaxResponse<boolean>>;
  changesPutApproveChange(
    { id }: ChangesPutApproveChangeRequest,
    opts?: OperationOpts,
  ): Observable<boolean | AjaxResponse<boolean>> {
    throwIfNullOrUndefined(id, "id", "changesPutApproveChange");

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      id: id,
    };

    return this.request<boolean>(
      {
        url: "/api/changes/approvechange",
        method: "PUT",
        query,
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesPutClearApproveStatus({
    id,
  }: ChangesPutClearApproveStatusRequest): Observable<boolean>;
  changesPutClearApproveStatus(
    { id }: ChangesPutClearApproveStatusRequest,
    opts?: OperationOpts,
  ): Observable<AjaxResponse<boolean>>;
  changesPutClearApproveStatus(
    { id }: ChangesPutClearApproveStatusRequest,
    opts?: OperationOpts,
  ): Observable<boolean | AjaxResponse<boolean>> {
    throwIfNullOrUndefined(id, "id", "changesPutClearApproveStatus");

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      id: id,
    };

    return this.request<boolean>(
      {
        url: "/api/changes/clearapprovestatus",
        method: "PUT",
        query,
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesPutRejectChange({
    id,
  }: ChangesPutRejectChangeRequest): Observable<boolean>;
  changesPutRejectChange(
    { id }: ChangesPutRejectChangeRequest,
    opts?: OperationOpts,
  ): Observable<AjaxResponse<boolean>>;
  changesPutRejectChange(
    { id }: ChangesPutRejectChangeRequest,
    opts?: OperationOpts,
  ): Observable<boolean | AjaxResponse<boolean>> {
    throwIfNullOrUndefined(id, "id", "changesPutRejectChange");

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      id: id,
    };

    return this.request<boolean>(
      {
        url: "/api/changes/rejectchange",
        method: "PUT",
        query,
      },
      opts?.responseOpts,
    );
  }

  /**
   */
  changesRiskQuestions(): Observable<{ [key: string]: string }>;
  changesRiskQuestions(
    opts?: OperationOpts,
  ): Observable<AjaxResponse<{ [key: string]: string }>>;
  changesRiskQuestions(
    opts?: OperationOpts,
  ): Observable<
    { [key: string]: string } | AjaxResponse<{ [key: string]: string }>
  > {
    return this.request<{ [key: string]: string }>(
      {
        url: "/api/changes/riskquestions",
        method: "GET",
      },
      opts?.responseOpts,
    );
  }
}
